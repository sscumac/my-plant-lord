{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  var fitMapToMarkers = function fitMapToMarkers(map, markers) {\n    var bounds = new mapboxgl.LngLatBounds();\n    markers.forEach(function (marker) {\n      return bounds.extend([marker.lng, marker.lat]);\n    });\n    map.fitBounds(bounds, {\n      padding: 70,\n      maxZoom: 15,\n      duration: 0\n    });\n  };\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/sejolu/cki8wbd1k2bob19pj6qimbtrr'\n    });\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // Create a HTML element for your custom marker\n\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      element.style.backgroundSize = 'contain';\n      element.style.width = '25px';\n      element.style.height = '25px'; // Pass the element as an argument to the new marker\n\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl: mapboxgl\n    }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/home/sebastian/code/sscumac/plant-lord/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","initMapbox","mapElement","document","getElementById","fitMapToMarkers","map","markers","bounds","LngLatBounds","forEach","marker","extend","lng","lat","fitBounds","padding","maxZoom","duration","accessToken","dataset","mapboxApiKey","Map","container","style","JSON","parse","popup","Popup","setHTML","infoWindow","element","createElement","className","backgroundImage","image_url","backgroundSize","width","height","Marker","setLngLat","setPopup","addTo","addControl"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACxC,QAAMC,MAAM,GAAG,IAAIT,QAAQ,CAACU,YAAb,EAAf;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAC,MAAM;AAAA,aAAIH,MAAM,CAACI,MAAP,CAAc,CAACD,MAAM,CAACE,GAAR,EAAaF,MAAM,CAACG,GAApB,CAAd,CAAJ;AAAA,KAAtB;AACAR,IAAAA,GAAG,CAACS,SAAJ,CAAcP,MAAd,EAAsB;AAAEQ,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,OAAO,EAAE,EAAxB;AAA4BC,MAAAA,QAAQ,EAAE;AAAtC,KAAtB;AACD,GAJD;;AAMA,MAAIhB,UAAJ,EAAgB;AAAE;AAChBH,IAAAA,QAAQ,CAACoB,WAAT,GAAuBjB,UAAU,CAACkB,OAAX,CAAmBC,YAA1C;AACA,QAAMf,GAAG,GAAG,IAAIP,QAAQ,CAACuB,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KADgB;AAE3BC,MAAAA,KAAK,EAAE;AAFoB,KAAjB,CAAZ;AAIA,QAAMjB,OAAO,GAAGkB,IAAI,CAACC,KAAL,CAAWxB,UAAU,CAACkB,OAAX,CAAmBb,OAA9B,CAAhB;AACAA,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1B,UAAMgB,KAAK,GAAG,IAAI5B,QAAQ,CAAC6B,KAAb,GAAqBC,OAArB,CAA6BlB,MAAM,CAACmB,UAApC,CAAd,CAD0B,CAG1B;;AACA,UAAMC,OAAO,GAAG5B,QAAQ,CAAC6B,aAAT,CAAuB,KAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,GAAoB,QAApB;AACAF,MAAAA,OAAO,CAACP,KAAR,CAAcU,eAAd,kBAAwCvB,MAAM,CAACwB,SAA/C;AACAJ,MAAAA,OAAO,CAACP,KAAR,CAAcY,cAAd,GAA+B,SAA/B;AACAL,MAAAA,OAAO,CAACP,KAAR,CAAca,KAAd,GAAsB,MAAtB;AACAN,MAAAA,OAAO,CAACP,KAAR,CAAcc,MAAd,GAAuB,MAAvB,CAT0B,CAW1B;;AACA,UAAIvC,QAAQ,CAACwC,MAAb,CAAoBR,OAApB,EACGS,SADH,CACa,CAAC7B,MAAM,CAACE,GAAR,EAAaF,MAAM,CAACG,GAApB,CADb,EAEG2B,QAFH,CAEYd,KAFZ,EAGGe,KAHH,CAGSpC,GAHT;AAID,KAhBD;AAiBAA,IAAAA,GAAG,CAACqC,UAAJ,CAAe,IAAI3C,cAAJ,CAAmB;AAChCmB,MAAAA,WAAW,EAAEpB,QAAQ,CAACoB,WADU;AAEhCpB,MAAAA,QAAQ,EAAEA;AAFsB,KAAnB,CAAf;AAIAM,IAAAA,eAAe,CAACC,GAAD,EAAMC,OAAN,CAAf;AACD;AACF,CAvCD;;AA0CA,SAASN,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  const fitMapToMarkers = (map, markers) => {\n    const bounds = new mapboxgl.LngLatBounds();\n    markers.forEach(marker => bounds.extend([marker.lng, marker.lat]));\n    map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n  };  \n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/sejolu/cki8wbd1k2bob19pj6qimbtrr'\n    });\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n      const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n      element.style.backgroundSize = 'contain';\n      element.style.width = '25px';\n      element.style.height = '25px';\n\n      // Pass the element as an argument to the new marker\n      new mapboxgl.Marker(element)\n        .setLngLat([marker.lng, marker.lat])\n        .setPopup(popup)\n        .addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl: mapboxgl\n    }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\n\nexport { initMapbox };"]},"metadata":{},"sourceType":"module"}